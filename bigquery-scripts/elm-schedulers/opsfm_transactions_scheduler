WITH
  EVENT_TEMP AS (
  SELECT
    DISTINCT EVENT.PARTITIONDATE,
    EVENT.EVENT_ID,
    EVENT.ACTION,
    EVENT.CURRENT_LOCATION_NAME,
    EVENT.CURRENT_LOCATION_TYPE_CODE,
    EVENT.DC_NUMBER,
    EVENT.EVENT_TIMESTAMP,
    EVENT.LPN_NUMBER,
    EVENT.PREVIOUS_LOCATION_NAME,
    EVENT.PREVIOUS_LOCATION_TYPE_CODE,
    EVENT.QUANTITY,
    EVENT.SKU,
    EVENT.UOM,
    EVENT.USER_ID,
    EVENT.TRACE_ID,
    ROW_NUMBER() OVER (PARTITION BY EVENT_ID, USER_ID ORDER BY EVENT_TIMESTAMP) AS ROW_NUM,
    EVENT.BUILD_ID
  FROM
    `pr-edw-views-thd.HDW.AUDIT_EVENT_LOG` EVENT
  WHERE
    TIMESTAMP(EVENT.PARTITIONDATE) > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 20 DAY)
    AND
    CASE
      WHEN (EVENT.ACTION = 'PICK_LPN_FROM_ACTIVE' AND EVENT.LPN_NUMBER IS NULL) THEN FALSE
      ELSE TRUE
  END
    AND EVENT.ACTION IN ( 'RECEIVE_LPN',
      'PICK_LPN_FROM_ACTIVE',
      'PICK_LPN_FROM_RESERVE',
      'MOVE_TO_LIFT',
      'MOVE_FROM_LIFT_TO_LPN_LOCATION',
      'MOVE_FROM_LIFT_DEPLETE_TO_LOCATION',
      'LOAD_LPN',
      'RETURN_TO_WAREHOUSE' )
    AND EVENT.API_VERSION = '1'
    AND EVENT.USER_ID != 'allocation-engine'
    AND EVENT.DC_NUMBER IN ('5859',
      '5853',
      '5987',
      '5897',
      '5898',
      '5840',
      '5824',
      '5914',
      '5865',
      '5856',
      '5977',
      '5928',
      '5830',
      '5955',
      '5942',
      '5943',
      '5978'))
SELECT
  DISTINCT PARTITION_DATE,
  EVENT_ID,
  EVENT_TYPE,
  END_LOCATION,
  END_LOCATION_TYPE_CODE,
  DC_NUMBER,
  EVENT_TIMESTAMP,
  LPN_NUMBER,
  START_LOCATION,
  START_LOCATION_TYPE_CODE,
  QUANTITY,
  SKU,
  UOM,
  USER_ID,
  TRACE_ID,
  ORDER_ORIGIN,
  ORDER_TYPE,
  BUILD_CASE_QUANTITY,
  BUILD_EACH_QUANTITY,
  BUILD_PALLET_QUANTITY,
  BUILD_DESCRIPTION
FROM (
  SELECT
    DISTINCT EVENTTEMP.PARTITIONDATE AS PARTITION_DATE,
    EVENTTEMP.EVENT_ID,
    EVENTTEMP.ACTION AS EVENT_TYPE,
    EVENTTEMP.CURRENT_LOCATION_NAME AS END_LOCATION,
    EVENTTEMP.CURRENT_LOCATION_TYPE_CODE END_LOCATION_TYPE_CODE,
    EVENTTEMP.DC_NUMBER,
    EVENTTEMP.EVENT_TIMESTAMP,
    EVENTTEMP.LPN_NUMBER,
    CASE
      WHEN EVENTTEMP.ACTION = 'MOVE_FROM_LIFT_DEPLETE_TO_LOCATION' THEN COALESCE(EVENT_TEMP_MOVE_TO_LIFT.PREVIOUS_LOCATION_NAME, EVENTTEMP.PREVIOUS_LOCATION_NAME)
      ELSE EVENTTEMP.PREVIOUS_LOCATION_NAME
  END
    AS START_LOCATION,
    EVENTTEMP.PREVIOUS_LOCATION_TYPE_CODE AS START_LOCATION_TYPE_CODE,
    EVENTTEMP.QUANTITY,
    EVENTTEMP.SKU,
    EVENTTEMP.UOM,
    EVENTTEMP.USER_ID,
    EVENTTEMP.TRACE_ID,
    ORDERS.ORDER_ORIGIN,
    CASE
    -- Need to recheck on Manual type
      WHEN ORDERS.ORDER_ORIGIN IN ('UDO', 'FULFILLMENT-INSTRUCTION', 'REVERSE-FULFILLMENT-INSTRUCTION') THEN 'Customer'
      WHEN ORDERS.ORDER_ORIGIN IN ('POM_TRANSFER',
      'POM-TRANSFER',
      'PO2DC',
      'SOM',
      'Manual') THEN 'Store'
      ELSE ORDERS.ORDER_ORIGIN
  END
    AS ORDER_TYPE,
    ROW_NUMBER() OVER (PARTITION BY EVENTTEMP.EVENT_ID ORDER BY CASE WHEN ORDERS.ORDER_ORIGIN IS NOT NULL THEN 1 ELSE 2 END , EVENTTEMP.EVENT_TIMESTAMP DESC) AS ROW_NUM_ORDER_TYPE,
    REGEXP_EXTRACT(BUILD_DESCRIPTION, r'(\d+)CA') AS BUILD_CASE_QUANTITY,
    REGEXP_EXTRACT(BUILD_DESCRIPTION, r'(\d+)EA') AS BUILD_EACH_QUANTITY,
    REGEXP_EXTRACT(BUILD_DESCRIPTION, r'(\d+)PL') AS BUILD_PALLET_QUANTITY,
    BUILD_DESCRIPTION
  FROM
    EVENT_TEMP EVENTTEMP
  LEFT JOIN
    `pr-edw-views-thd.HDW.GQL_DATA_CORE_PACKAGE_BUILD` BUILD
  ON
    BUILD.PACKAGE_BUILD_ID = EVENTTEMP.BUILD_ID
    AND BUILD.CRNT_ROW_IND='Y'
  LEFT JOIN
    `pr-edw-views-thd.HDW.INVENTORY_CORE_LPN` LPN
  ON
    LPN.LPN_NUMBER = EVENTTEMP.LPN_NUMBER
    AND LPN.dc_number = EVENTTEMP.DC_NUMBER
    -- AND LPN.CRNT_ROW_IND='Y'
  LEFT JOIN
    `pr-edw-views-thd.HDW.INVENTORY_CORE_INVENTORY` INVENTORY
  ON
    INVENTORY.LPN_ID = LPN.LPN_ID
    AND INVENTORY.dc_number = LPN.DC_NUMBER
    -- AND INVENTORY.latest_flg = TRUE
    AND TIMESTAMP(INVENTORY.PARTITIONDATE) > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 20 DAY)
  LEFT JOIN
    `pr-edw-views-thd.HDW.FULFILLMENT_CORE_ORDERS` ORDERS
  ON
    ORDERS.ORDER_ID = INVENTORY.ORDER_ID
    AND ORDERS.dc_number = INVENTORY.DC_NUMBER
    -- AND ORDERS.latest_flg = TRUE
    AND TIMESTAMP(ORDERS.PARTITIONDATE) > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 20 DAY)
  LEFT JOIN (
    SELECT
      LPN_NUMBER,
      USER_ID,
      DC_NUMBER,
      MAX(EVENT_TIMESTAMP) AS MAX_TIMESTAMP
    FROM
      EVENT_TEMP
    WHERE
      ACTION = 'MOVE_TO_LIFT'
    GROUP BY
      LPN_NUMBER,
      USER_ID,
      DC_NUMBER ) AS EVENT_TEMP_MOVE_TO_LIFT_LATEST
  ON
    EVENTTEMP.LPN_NUMBER = EVENT_TEMP_MOVE_TO_LIFT_LATEST.LPN_NUMBER
    AND EVENTTEMP.USER_ID = EVENT_TEMP_MOVE_TO_LIFT_LATEST.USER_ID
    AND EVENTTEMP.DC_NUMBER = EVENT_TEMP_MOVE_TO_LIFT_LATEST.DC_NUMBER
  LEFT JOIN
    EVENT_TEMP EVENT_TEMP_MOVE_TO_LIFT
  ON
    EVENTTEMP.LPN_NUMBER = EVENT_TEMP_MOVE_TO_LIFT.LPN_NUMBER
    AND EVENTTEMP.USER_ID = EVENT_TEMP_MOVE_TO_LIFT.USER_ID
    AND EVENTTEMP.DC_NUMBER = EVENT_TEMP_MOVE_TO_LIFT.DC_NUMBER
    AND EVENT_TEMP_MOVE_TO_LIFT.ACTION = 'MOVE_TO_LIFT'
    AND EVENT_TEMP_MOVE_TO_LIFT.EVENT_TIMESTAMP = EVENT_TEMP_MOVE_TO_LIFT_LATEST.MAX_TIMESTAMP
  WHERE
    EVENTTEMP.ROW_NUM=1)
WHERE
  ROW_NUM_ORDER_TYPE=1